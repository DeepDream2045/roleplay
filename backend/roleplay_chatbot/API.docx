To log in using the magic link, you need to follow these steps:
(Note: please add the email creds in the .env file)

Send an email to the provided email address. Include the email address in the body of the request, like this:

Request URL: http://127.0.0.1:8000/login_request/
Request Body:
{
    "email": "test@gmail.com"
}
Response: http://localhost:3000/login_verify/{token}
For example: http://localhost:3000/login_verify/3a650ab0-5b1e-4ca0-966a-8fca6695c88c


To verify the magic link, make another request with the following details:
Request URL: http://localhost:8000/login_verify/
Request Body:
{
    "token":"3a650ab0-5b1e-4ca0-966a-8fca6695c88c"
}

Response:
{
    "message": "success",
    "data": {
        "id": 2,
        "full_name": "test",
        "email": "test@test.com",
        "phone": "123456789",
        "stay_sign": false,
        "profile_image": null
    },
    "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}

##############################################################################
For Logout API
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

Request Method: Post
Response:
{
    "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...."
}

##############################################################################
For Model Info APIs
Request URL: http://localhost:8000/model_info/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
[
    {
        "id": 1,
        "created_date": "2024-01-15T07:49:32.874281Z",
        "modified_date": "2024-01-15T07:49:32.874304Z",
        "model_name": "test",
        "short_bio": "test",
        "model_location": "test",
        "prompt_template": "test",
        "temperature": 0.1,
        "repetition_penalty": 0.1,
        "top_p": 0.1,
        "top_k": 1,
        "user": 2
    },
]

----------------------------------------------------------
Request Method: Post
Request Body:
{
    "model_name": "test",
    "short_bio": "test",
    "model_location": "test",
    "prompt_template": "test",
    "temperature": 0.1,
    "repetition_penalty": 0.1,
    "top_p": 0.1,
    "top_k": 1
}

Response:
{
    "id": 1,
    "created_date": "2024-01-15T07:49:32.874281Z",
    "modified_date": "2024-01-15T07:49:32.874304Z",
    "model_name": "test",
    "short_bio": "test",
    "model_location": "test",
    "prompt_template": "test",
    "temperature": 0.1,
    "repetition_penalty": 0.1,
    "top_p": 0.1,
    "top_k": 1,
    "user": 2
}

----------------------------------------------------------
Request Method: PUT
Request Body:
{
    "id":1,
    "model_name": "update test",
    "short_bio": "update test",
    "model_location": "test",
    "prompt_template": "test",
    "temperature": 0.1,
    "repetition_penalty": 0.1,
    "top_p": 0.1,
    "top_k": 1
}

Response:
{
    "message": "LLM Model info updated successfully"
}

----------------------------------------------------------
Request Method: DELETE
Request Body:
{
    "id":2
}

Response:
{
    "message": "LLM Model info deleted successfully"
}

##############################################################################
For Character Info APIs
Request URL: http://localhost:8000/character_info/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
[
    {
        "id": 11,
        "model_id": {
            "id": 1,
            "model_name": "update test",
            "short_bio": "update test",
            "model_location": "test",
            "prompt_template": "test",
            "temperature": 0.1,
            "repetition_penalty": 0.1,
            "top_p": 0.1,
            "top_k": 1
        },
        "user": {
            "id": 1,
            "full_name": "test",
            "profile_image": null
        },
        "tags": [
            {
                "id": 1,
                "tag_name": "Anime"
            }
        ],
        "character_name": "Test Elon",
        "short_bio": "Entrepreneur and business magnate. CEO of SpaceX and Tesla, among other ventures. Pioneer in electric vehicles, space exploration, and renewable energy. straight forward person, who talks sarcastically.",
        "character_gender": "male",
        "prompt": "Tone_and_Style: Maintain Casual, informal conversation, with occasional formalities in business-related discussions. while engaging with the user,\nUser_engagement_style: Maintain straightforward and directness in your communication with users.,\n",
        "character_visibility": "private",
        "initial_message": "Hello",
        "image": null,
        "NSFW": false,
        "lorebook": null,
        "language": "ENGLISH",
        "created_date": "2024-01-25T15:56:31.330173Z",
        "modified_date": "2024-01-25T15:56:39.070319Z"
    },
]

----------------------------------------------------------
Request Method: Post
Request Body:
{
    "character_name":"Test Role",
    "short_bio":"Test Role",
    "character_gender":"male",
    "tags":[1,3],
    "model_id":"1",
    "prompt":"test prompt",
    "character_visibility":"private",
    "initial_message":"",
    "NSFW":false,
    "lorebook":"",
    "language":""
}

Response:
{
    "id": 1,
    "character_name": "Test Role",
    "short_bio": "Test Role",
    "character_gender": "male",
    "tags": "Anime",
    "prompt": "test prompt",
    "character_visibility": "private",
    "initial_message": "",
    "image": null,
    "NSFW": false,
    "lorebook": "",
    "language": "",
    "created_date": "2024-01-15T08:27:55.498415Z",
    "modified_date": "2024-01-15T08:27:55.498436Z",
    "model_id": 1,
    "user": 2
}

----------------------------------------------------------
Request Method: PUT
Request Body:
{
    "id": 2,
    "character_name":"Test 3",
    "short_bio":"Test Role",
    "character_gender":"male",
    "tags":"Anime",
    "model_id":"1",
    "prompt":"test prompt",
    "character_visibility":"public",
    "initial_message":"",
    "NSFW":false,
    "lorebook":"",
    "language":""
}

Response:
{
    "message": "character info update successfully"
}

----------------------------------------------------------
Request Method: DELETE
Request Body:
{
    "id":2
}

Response:
{
    "message": "character info deleted successfully"
}

##############################################################################
For Tag Info APIs
Request URL: http://127.0.0.1:8000/tag_info/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
[
    {
        "id": 1,
        "created_date": "2024-01-25T14:44:06.287446Z",
        "modified_date": "2024-01-25T14:44:06.287486Z",
        "tag_name": "Anime",
        "user": 1
    },
    {
        "id": 3,
        "created_date": "2024-01-25T15:06:06.206796Z",
        "modified_date": "2024-01-25T15:06:06.206823Z",
        "tag_name": "Female",
        "user": 1
    }
]

Request Method: Post
Request Body:
{
    "tag_name":"Male"
}

Response:
{
    "id": 4,
    "created_date": "2024-01-26T06:09:08.346364Z",
    "modified_date": "2024-01-26T06:09:08.346388Z",
    "tag_name": "Male",
    "user": 1
}

Request Method: Put
Request Body:
{
    "id":4,
    "tag_name":"Game"
}

Response:
{
    "message": "Tag info update successfully"
}

Request Method: delete
Request Body:
{
    "id":5
}

Response:
{
    "message": "Tag info deleted successfully"
}

##############################################################################
For Room Info APIs
Request URL: http://127.0.0.1:8000/room_info/
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
(Note:- It provides information about the room along with the chat messages linked to it.)
Response:
{
    "message": "success",
    "data": [
        {
            "room_id": "E586dK5joxqfrhw5sLTKVH",
            "type": 1,
            "group_name": "test - Elon Musk",
            "user": 1,
            "character": 2,
            "chatroom": [
                {
                    "id": 5,
                    "created_date": "2024-01-24T14:23:21.831955Z",
                    "modified_date": "2024-01-24T15:42:28.762372Z",
                    "user_message": "Hello test",
                    "character_message": "123456789",
                    "is_edited": false,
                    "chat": 3
                },
                {
                    "id": 6,
                    "created_date": "2024-01-24T14:24:48.462932Z",
                    "modified_date": "2024-01-24T14:24:48.471699Z",
                    "user_message": "Hello test",
                    "character_message": "402949",
                    "is_edited": false,
                    "chat": 3
                }
            ]
        },
        {
            "room_id": "URx46Z4PM3ekgGaDCFeTPk",
            "type": 1,
            "group_name": "Elon Musk",
            "user": 1,
            "character": 3,
            "chatroom": []
        }
    ]
}

Request Method: Post
Request Body:
{
    "user":1,
    "character":3
}

Response:
{
    "room_id": "EnroiysXGwz88EJJyKKNnX",
    "group_name": "Elon Musk",
    "user": 1,
    "character": 3,
    "user_name": "test",
    "profile_image": null,
    "character_name": "Elon Musk",
    "character_image": null
}

Request Method: Put
Request Body:
{
    "room_id":"EnroiysXGwz88EJJyKKNnX",
    "user":1,
    "character":3
}

{
    "message": "Room info update successfully"
}

Request Method: delete
Request Body:
{
    "room_id":"EnroiysXGwz88EJJyKKNnX"
}

Response:
{
    "message": "Room info deleted successfully"
}


##############################################################################
For Chat Message APIs
Request URL: http://127.0.0.1:8000/tag_info/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: Post
Request Body:
{
    "room_id": "E586dK5joxqfrhw5sLTKVH"
}

Response:
{
    "message": "success",
    "data": [
        {
            "id": 5,
            "created_date": "2024-01-24T14:23:21.831955Z",
            "modified_date": "2024-01-24T15:42:28.762372Z",
            "user_message": "Hello test",
            "character_message": "123456789",
            "is_edited": false,
            "chat": 3
        },
        {
            "id": 6,
            "created_date": "2024-01-24T14:24:48.462932Z",
            "modified_date": "2024-01-24T14:24:48.471699Z",
            "user_message": "Hello test",
            "character_message": "402949",
            "is_edited": false,
            "chat": 3
        }
    ]
}

Request Method: Put
Request Body:
{
    "message_id": 5,
    "character_message": "I am good"
}

Response:
{
    "message": "Chat Message update successfully"
}

Request Method: delete
Request Body:
{
    "message_id": 5,
}

Response:
{
    "message": "Chat Message deleted successfully"
}


##############################################################################
For user created character info APIs
Request URL: http://127.0.0.1:8000/public_character_info/
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
[
    {
        "id": 1,
        "character_name": "Test Role",
        "short_bio": "Test Role",
        "character_gender": "male",
        "tags": "Anime",
        "prompt": "test prompt",
        "character_visibility": "private",
        "initial_message": "",
        "image": null,
        "NSFW": false,
        "lorebook": "",
        "language": "",
        "created_date": "2024-01-15T08:27:55.498415Z",
        "modified_date": "2024-01-15T08:27:55.498436Z",
        "model_id": 1,
        "user": 2
    },
]


##############################################################################
For User Profile APIs
Request URL: http://127.0.0.1:8000/user_profile/
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
{
    "message": "success",
    "data": [
        {
            "id": 1,
            "full_name": "test",
            "email": "test@test.com",
            "phone": "123456789",
            "profile_image": "http://127.0.0.1:8000/media/image/profile/images_1.jpeg",
            "stay_sign": false
        }
    ]
}

Request Method: PUT
Request Body:
{
    "full_name": "Test"
}

Response:
{
    "message": "User Profile updated successfully"
}

##############################################################################
For get Character info By id APIs
Request URL: http://127.0.0.1:8000/character_info_by_id/
(Note:- if you need to change anything in the character use the character_info API with PUT method along with the character id)

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: Post
Request Body:
{
    "character_id":3
}

Response:
[
    {
        "id": 3,
        "model_id": {
            "id": 1,
            "model_name": "update test",
            "short_bio": "update test",
            "model_location": "test",
            "prompt_template": "test",
            "temperature": 0.1,
            "repetition_penalty": 0.1,
            "top_p": 0.1,
            "top_k": 1
        },
        "user": {
            "id": 1,
            "full_name": "Test",
            "profile_image": "/media/image/profile/images_1.jpeg"
        },
        "tags": [],
        "character_name": "Elon Musk",
        "short_bio": "Entrepreneur and business magnate. CEO of SpaceX and Tesla, among other ventures. Pioneer in electric vehicles, space exploration, and renewable energy. straight forward person, who talks sarcastically.",
        "character_gender": "male",
        "prompt": "{{promp}}",
        "character_visibility": "public",
        "initial_message": "Hello",
        "image": null,
        "NSFW": false,
        "lorebook": null,
        "language": "ENGLISH",
        "created_date": "2024-01-22T08:49:00.050222Z",
        "modified_date": "2024-01-22T08:49:00.050245Z"
    }
]

##############################################################################
For Feedback APIs
Request URL: http://127.0.0.1:8000/user_profile/
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
{
    "message": "success",
    "data": [
        {
            "id": 1,
            "created_date": "2024-01-31T16:26:50.995642Z",
            "modified_date": "2024-01-31T16:26:50.995667Z",
            "types": "nice job",
            "content": "Good work",
            "user": 1
        },
        {
            "id": 2,
            "created_date": "2024-01-31T16:28:34.883298Z",
            "modified_date": "2024-01-31T16:28:34.883323Z",
            "types": "nice job",
            "content": "Good work",
            "user": 1
        },
    ]
}

Request Method: POST
Request Body:
{
    "types":"nice job",
    "content":"Good work"
}

Response:
{
    "id": 3,
    "created_date": "2024-02-02T06:05:40.786480Z",
    "modified_date": "2024-02-02T06:05:40.786500Z",
    "types": "nice job",
    "content": "Good work",
    "user": 1
}


##############################################################################
For WebSocket APIs
Request URL: ws://localhost:8000/asw/user_id/character_id/

Request Body:
{
    "text": "user message"
}

Response:
{
    "message_id": 4,
    "sender_user_message": "who is modi?",
    "character_message": " Well, my friend, He's the Prime Minister of India",

    "sender_user_id": 2,
    "sender_email": "test@test.com",
    "sender_profile_pic": null,

    "character_id": 1,
    "character_name": "Elon Musk",
    "character_profile_pic": null
}
