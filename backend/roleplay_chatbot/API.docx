To log in using the magic link, you need to follow these steps:
(Note: please add the email creds in the .env file)

Send an email to the provided email address. Include the email address in the body of the request, like this:

Request URL: http://127.0.0.1:8000/login_request/
Request Body:
{
    "email": "test@gmail.com"
}
Response: http://localhost:3000/login_verify/{token}
For example: http://localhost:3000/login_verify/3a650ab0-5b1e-4ca0-966a-8fca6695c88c


To verify the magic link, make another request with the following details:
Request URL: http://localhost:8000/login_verify/
Request Body:
{
    "token":"3a650ab0-5b1e-4ca0-966a-8fca6695c88c"
}

Response:
{
    "message": "success",
    "data": {
        "id": 2,
        "full_name": "test",
        "email": "test@test.com",
        "phone": "123456789",
        "stay_sign": false,
        "profile_image": null
    },
    "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}

##############################################################################
For Logout API
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

Request Method: Post
Response:
{
    "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...."
}

##############################################################################
For Model Info APIs
Request URL: http://localhost:8000/model_info/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Note:- This will list all public and self created modal details
Response:
[
    {
        "id": 1,
        "created_date": "2024-02-23T12:51:12.572882Z",
        "modified_date": "2024-02-23T12:51:12.572912Z",
        "model_name": "modal1",
        "short_bio": "test",
        "huggingFace_model_name": "new modal",
        "model_location": "test",
        "prompt_template": "hii i am testing",
        "temperature": 0.85,
        "repetition_penalty": 1.15,
        "top_p": 0.8,
        "top_k": 50,
        "is_public": true,
        "is_finetune": false,
        "user": {
            "id": 1,
            "full_name": "john",
            "username": "john",
            "email": "john@mailinator.com",
            "profile_image": null
        }
    }
]

----------------------------------------------------------
Note:- This API endpoint is used to create modals

Request Method: Post
Request Body:
{
 "model_name": "modal1",
  "short_bio": "test",
  "model_location": "test",
  "is_public":"True",
  "prompt_template": "hii i am testing",
  "temperature": 0.85,
  "repetition_penalty": 1.15,
  "top_p": 0.8,
  "top_k": 50,
  "huggingFace_model_name":"new modal"
}

Response:
{
    "id": 1,
    "created_date": "2024-02-23T12:51:12.572882Z",
    "modified_date": "2024-02-23T12:51:12.572912Z",
    "model_name": "modal1",
    "short_bio": "test",
    "huggingFace_model_name": "new modal",
    "model_location": "test",
    "prompt_template": "hii i am testing",
    "temperature": 0.85,
    "repetition_penalty": 1.15,
    "top_p": 0.8,
    "top_k": 50,
    "is_public": true,
    "is_finetune": false,
    "user": {
        "id": 1,
        "full_name": "john",
        "username": "john",
        "email": "john@mailinator.com",
        "profile_image": null
    }
}

----------------------------------------------------------
Note:- This API endpoint is used to update modal values , which fields you want to update.
Request Method: PUT
Request Body:
{
    "id":1,
    "model_name": "update test",
    "short_bio": "update test",
    "model_location": "test",
    "prompt_template": "test",
    "temperature": 0.1,
    "repetition_penalty": 0.1,
    "top_p": 0.1,
    "top_k": 1
}

Response:
{
    "message": "LLM Model info updated successfully"
}

----------------------------------------------------------
Request Method: DELETE
Request Body:
{
    "id":2
}

Response:
{
    "message": "LLM Model info deleted successfully"
}

##############################################################################

For get all modal  info list created by self 
Request URL: http://127.0.0.1:8000/user_models_list/
Note:- this url is used for get all the modals created by self. 
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: get

Response:
[
    {
        "id": 2,
        "created_date": "2024-02-23T12:59:13.069729Z",
        "modified_date": "2024-02-23T12:59:13.069751Z",
        "model_name": "modal2",
        "short_bio": "test",
        "huggingFace_model_name": "new modal",
        "model_location": "test",
        "prompt_template": "hii i am testing",
        "temperature": 0.85,
        "repetition_penalty": 1.15,
        "top_p": 0.8,
        "top_k": 50,
        "is_public": true,
        "is_finetune": false,
        "user": {
            "id": 1,
            "full_name": "john",
            "username": "john",
            "email": "john@mailinator.com",
            "profile_image": null
        }
    }
]

##############################################################################
For Character Info APIs
Request URL: http://localhost:8000/character_info/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Note:- This will list the characters, created by self.
Request Method: GET
Response:
[
    {
        "id": 1,
        "model_id": {
            "id": 2,
            "model_name": "modal2",
            "short_bio": "test",
            "model_location": "test",
            "prompt_template": "hii i am testing",
            "temperature": 0.85,
            "repetition_penalty": 1.15,
            "top_p": 0.8,
            "top_k": 50
        },
        "user": {
            "id": 1,
            "full_name": "john",
            "username": "john",
            "profile_image": null
        },
        "tags": [
            {
                "id": 1,
                "tag_name": "man"
            }
        ],
        "character_name": "john char",
        "short_bio": "Short bio for the char...",
        "character_gender": "female",
        "prompt": "sdsd",
        "character_story": "story",
        "character_visibility": "unlisted",
        "initial_message": "Initial message for the character...\"",
        "image": null,
        "NSFW": false,
        "lorebook": "Lorebook content...",
        "language": "ENGLISH",
        "created_date": "2024-02-23T13:02:41.088476Z",
        "modified_date": "2024-02-23T13:02:41.088492Z"
    }
]
----------------------------------------------------------
Request Method: Post
Request Body:
Request Body:
{
    "character_name": "Test Role",
    "short_bio": "Test Role",
    "character_gender": "female",
    "prompt": "Character prompt...",
    "character_story": "story",
    "lorebook": "Lorebook content...",
    "language": "ENGLISH",
    "character_visibility": "unlisted",
    "initial_message": "Initial message for the character...",
    "tags":[1],
    "model_id":"1",
    "NSFW":false   
}
Response:
{
    "message": "success",
    "data": {
        "id": 1,
        "user": {
            "id": 1,
            "full_name": "john",
            "username": "john",
            "profile_image": null
        },
        "tags": [
            1
        ],
        "character_name": "john char",
        "short_bio": "Short bio for the char...",
        "character_gender": "female",
        "prompt": "sdsd",
        "character_story": "story",
        "character_visibility": "unlisted",
        "initial_message": "Initial message for the character...\"",
        "image": null,
        "NSFW": false,
        "lorebook": "Lorebook content...",
        "language": "ENGLISH",
        "created_date": "2024-02-23T13:02:41.088476Z",
        "modified_date": "2024-02-23T13:02:41.088492Z",
        "model_id": 2
    }
}

----------------------------------------------------------
Request Method: PUT
Request Body:
{
    "id": 2,
    "character_name":"Test 3",
    "short_bio":"Test Role",
    "character_gender":"male",
    "tags":"Anime",
    "model_id":"1",
    "prompt":"test prompt",
    "character_visibility":"public",
    "initial_message":"",
    "NSFW":false,
    "lorebook":"",
    "language":""
}

Response:
{
    "message": "character info update successfully"
}

----------------------------------------------------------
Request Method: DELETE
Request Body:
{
    "id":2
}

Response:
{
    "message": "character info deleted successfully"
}

##############################################################################
For Tag Info APIs
Request URL: http://127.0.0.1:8000/tag_info/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
[
    {
        "id": 1,
        "created_date": "2024-01-25T14:44:06.287446Z",
        "modified_date": "2024-01-25T14:44:06.287486Z",
        "tag_name": "Anime",
        "user": 1
    },
    {
        "id": 3,
        "created_date": "2024-01-25T15:06:06.206796Z",
        "modified_date": "2024-01-25T15:06:06.206823Z",
        "tag_name": "Female",
        "user": 1
    }
]

----------------------------------------
Request Method: Post
Request Body:
{
    "tag_name":"Male"
}

Response:
{
    "id": 4,
    "created_date": "2024-01-26T06:09:08.346364Z",
    "modified_date": "2024-01-26T06:09:08.346388Z",
    "tag_name": "Male",
    "user": 1
}

Request Method: Put
Request Body:
{
    "id":4,
    "tag_name":"Game"
}

Response:
{
    "message": "Tag info update successfully"
}

Request Method: delete
Request Body:
{
    "id":5
}

Response:
{
    "message": "Tag info deleted successfully"
}

##############################################################################
For Room Info APIs
Request URL: http://127.0.0.1:8000/room_info/
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
(Note:- It provides information about the room along with the chat messages linked to it.)
Response:
{
    "message": "success",
    "data": [
        {
            "room_id": "E586dK5joxqfrhw5sLTKVH",
            "type": 1,
            "group_name": "test - Elon Musk",
            "user": 1,
            "character": 2,
            "chatroom": [
                {
                    "id": 5,
                    "created_date": "2024-01-24T14:23:21.831955Z",
                    "modified_date": "2024-01-24T15:42:28.762372Z",
                    "user_message": "Hello test",
                    "character_message": "123456789",
                    "is_edited": false,
                    "chat": 3
                },
                {
                    "id": 6,
                    "created_date": "2024-01-24T14:24:48.462932Z",
                    "modified_date": "2024-01-24T14:24:48.471699Z",
                    "user_message": "Hello test",
                    "character_message": "402949",
                    "is_edited": false,
                    "chat": 3
                }
            ]
        },
        {
            "room_id": "URx46Z4PM3ekgGaDCFeTPk",
            "type": 1,
            "group_name": "Elon Musk",
            "user": 1,
            "character": 3,
            "chatroom": []
        }
    ]
}

Request Method: Post
Request Body:
{
    "character":3
}

Response:
{
    "room_id": "EnroiysXGwz88EJJyKKNnX",
    "group_name": "Elon Musk",
    "user": 1,
    "character": 3,
    "user_name": "test",
    "profile_image": null,
    "character_name": "Elon Musk",
    "character_image": null
}

Request Method: Put
Request Body:
{
    "room_id":"EnroiysXGwz88EJJyKKNnX",
    "user":1,
    "character":3
}

{
    "message": "Room info update successfully"
}

Request Method: delete
Request Body:
{
    "room_id":"EnroiysXGwz88EJJyKKNnX"
}

Response:
{
    "message": "Room info deleted successfully"
}


##############################################################################
For Chat Message APIs
Request URL: http://127.0.0.1:8000/chat_message/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: Post
Request Body:
{
    "room_id": "E586dK5joxqfrhw5sLTKVH"
}

Response:
{
    "message": "success",
    "data": [
        {
            "id": 5,
            "created_date": "2024-01-24T14:23:21.831955Z",
            "modified_date": "2024-01-24T15:42:28.762372Z",
            "user_message": "Hello test",
            "character_message": "123456789",
            "is_edited": false,
            "chat": 3
        },
        {
            "id": 6,
            "created_date": "2024-01-24T14:24:48.462932Z",
            "modified_date": "2024-01-24T14:24:48.471699Z",
            "user_message": "Hello test",
            "character_message": "402949",
            "is_edited": false,
            "chat": 3
        }
    ]
}

Request Method: Put
Request Body:
{
    "message_id": 5,
    "character_message": "I am good"
}

Response:
{
    "message": "Chat Message update successfully"
}

Request Method: delete
Request Body:
{
    "message_id": 5,
}

Response:
{
    "message": "Chat Message deleted successfully"
}


##############################################################################
For Public access character info APIs
Request URL: http://127.0.0.1:8000/public_character_info/
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
[
    {
        "id": 1,
        "user": {
            "id": 1,
            "full_name": "john",
            "username": "john",
            "profile_image": null
        },
        "tags": [1],
        "character_name": "testing user",
        "short_bio": "Test Role",
        "character_gender": "male",
        "prompt": "test prompt",
        "character_story": "Updated Story",
        "character_visibility": "public",
        "initial_message": "Initial message for the character...\"",
        "image": null,
        "NSFW": false,
        "lorebook": "Lorebook content...",
        "language": "ENGLISH",
        "created_date": "2024-02-23T13:02:41.088476Z",
        "modified_date": "2024-02-23T13:24:00.632082Z",
        "model_id": 2
    }
]


##############################################################################
For User Profile APIs
Request URL: http://127.0.0.1:8000/user_profile/
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
{
    "message": "success",
    "data": [
        {
            "id": 1,
            "full_name": "test",
            "email": "test@test.com",
            "phone": "123456789",
            "profile_image": "http://127.0.0.1:8000/media/image/profile/images_1.jpeg",
            "stay_sign": false
        }
    ]
}

Request Method: PUT
Request Body:
{
    "full_name": "Test"
}

Response:
{
    "message": "User Profile updated successfully"
}

##############################################################################
For get Character info By id APIs
Request URL: http://127.0.0.1:8000/character_info_by_id/
(Note:- if you need to change anything in the character use the character_info API with PUT method along with the character id)

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: Post
Request Body:
{
    "character_id":3
}

Response:
[
    {
        "id": 1,
        "model_id": {
            "id": 2,
            "model_name": "modal2",
            "short_bio": "test",
            "model_location": "test",
            "prompt_template": "hii i am testing",
            "temperature": 0.85,
            "repetition_penalty": 1.15,
            "top_p": 0.8,
            "top_k": 50
        },
        "user": {
            "id": 1,
            "full_name": "john",
            "username": "john",
            "profile_image": null
        },
        "tags": [1],
        "character_name": "testing user",
        "short_bio": "Test Role",
        "character_gender": "male",
        "prompt": "test prompt",
        "character_story": "Updated Story",
        "character_visibility": "unlisted",
        "initial_message": "Initial message for the character...\"",
        "image": null,
        "NSFW": false,
        "lorebook": "Lorebook content...",
        "language": "ENGLISH",
        "created_date": "2024-02-23T13:02:41.088476Z",
        "modified_date": "2024-02-23T13:06:55.181468Z"
    }
]
##############################################################################
For Feedback APIs
Request URL: http://127.0.0.1:8000/user_profile/
Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Response:
{
    "message": "success",
    "data": [
        {
            "id": 1,
            "created_date": "2024-01-31T16:26:50.995642Z",
            "modified_date": "2024-01-31T16:26:50.995667Z",
            "types": "nice job",
            "content": "Good work",
            "user": 1
        },
        {
            "id": 2,
            "created_date": "2024-01-31T16:28:34.883298Z",
            "modified_date": "2024-01-31T16:28:34.883323Z",
            "types": "nice job",
            "content": "Good work",
            "user": 1
        },
    ]
}

Request Method: POST
Request Body:
{
    "types":"nice job",
    "content":"Good work"
}

Response:
{
    "id": 3,
    "created_date": "2024-02-02T06:05:40.786480Z",
    "modified_date": "2024-02-02T06:05:40.786500Z",
    "types": "nice job",
    "content": "Good work",
    "user": 1
}

##############################################################################
For Public Tag Info APIs
Request URL: http://127.0.0.1:8000/public_tag_info/
----------------------------------------------------------
Request Method: GET
Response:
[
    {
        "id": 1,
        "tag_name": "Anime"
    },
    {
        "id": 2,
        "tag_name": "Male"
    },
    {
        "id": 3,
        "tag_name": "Female"
    }
]

##############################################################################
For WebSocket APIs
Request URL: ws://localhost:8000/asw/user_id/room_id/

Request Body:
{
    "text": "user message"
}

Response:
{
    "message_id": 132,
    "sender_user_message": "tell me about yourself",
    "character_message": "  Of course! *adjusts glasses* Hello there! *looks directly into eyes* My name is Hermione Jean Granger,",
    "sender_user_id": 1,
    "sender_name": "Roleplay",
    "sender_username": "roleplay",
    "sender_profile_pic": "/media/image/profile/images123.jpeg",
    "character_id": 26,
    "character_name": "Hermione Granger",
    "character_profile_pic": "/media/image/character/e9bf8859-073e-497b-9451-7688f01842c5_yVAAY79.webp"
}

##############################################################################

For create guest user info API
Request URL: http://127.0.0.1:8000/create_guest_user/
(Note:- with this url you can get guest user information, In this we will not send any authorization token in headers )

----------------------------------------------------------
Request Method: get
Response:
{
    "message": "Guest user created successfully",
    "data": {
        "id": 25,
        "is_guest": true,
        "full_name": "guest_23528",
        "username": "guest_23528",
        "email": "guest_23528@mail.com"
    }
}

##############################################################################

Create room ID for GUEST USERS API

Request URL: http://127.0.0.1:8000/guest_create_room_info/
(Note:- with this url you can get room info for guest user, In this we will not send any authorization token in headers )

----------------------------------------------------------
Request Method: Post
Request Body:
{
    "user_id":1,
    "character_id":26
}

Response:
{
    "message": "success",
    "data": {
        "room_id": "2UGFmLamKridAhWAettW62",
        "type": 1,
        "group_name": "Hermione Granger",
        "user": {
            "id": 25,
            "full_name": "guest_23528",
            "username": "guest_23528",
            "profile_image": null
        },
        "character": {
            "id": 26,
            "character_name": "Hermione Granger",
            "short_bio": "Hermione Granger is a remarkable young witch with exceptional intelligence, drive, and independence. She excels academically at Hogwarts School of Witchcraft and Wizardry, where her peers and professors respect her abilities in magic. Hermione is committed to fighting for justice, empathy, and the greater good, regardless of authority figures or danger. Her assertiveness and independence make her both admirable and relatable to people of all ages. Hermione continues to evolve and develop, becoming more confident and willing to take on greater risks in her pursuit of justice and the greater good. Overall, Hermione serves as an inspiration to generations with her intelligence, drive, and determination.",
            "character_gender": "Female",
            "prompt": "Personality: Hermione Granger is a strong-willed and determined young woman with a sharp mind and a deep sense of justice. She is fiercely loyal to her friends and will go to great lengths to protect them. As an INTJ personality type, she is analytical and strategic, always looking for the most efficient way to solve a problem. However, she can also be stubborn and opinionated, sometimes struggling to see other perspectives.\r\n\r\nAppearance: Hermione has bushy, curly hair that she often wears in a neat bun. She has large, expressive brown eyes and a sharp jawline. She is petite in stature but carries herself with a confident and commanding presence.\r\n\r\nLife story: Hermione was born to Muggle parents and discovered her magical abilities at a young age. She was a bookworm from a young age and quickly became fascinated with the wizarding world. When she received her letter to attend Hogwarts School of Witchcraft and Wizardry, she was overjoyed. At Hogwarts, she quickly became known for her intelligence and her fierce determination to succeed. She formed a close bond with fellow students Harry Potter and Ron Weasley, and together, they faced many challenges and triumphs.\r\n\r\nReason for being on a chat app: Hermione is on a chat app in the hopes of finding someone who shares her love of learning and her passion for justice. She is looking for someone who can challenge her intellectually and who shares her values.\r\n\r\nName: Hermione Granger",
            "character_story": "",
            "character_visibility": "public",
            "initial_message": "I'm a book-loving, problem-solving wizard with bushy hair and big dreams, seeking someone who can keep up with my wit and join me in fighting for justice.",
            "image": "http://24.83.27.62:4002/media/image/character/_23e5e313-f670-4c84-b569-7697554f502a.jfif",
            "NSFW": false,
            "lorebook": "null",
            "language": "null",
            "created_date": "2024-02-02T04:58:50.189144Z",
            "modified_date": "2024-02-06T15:04:41.285364Z",
            "model_id": 1,
            "user": 17,
            "tags": [
                3
            ]
        }
    }
}

##############################################################################

For room info list by guest id API

Request URL: http://127.0.0.1:8000/guest_room_info_by_id/

(Note:- with this url you can get room info list of guest users by their id, In this we will not send any authorization token in headers )
----------------------------------------------------------
Request Method: Post
Request Body:
{
    "user_id":27 //guset_id
}
Response:
[
    {
        "room_id": "mEHmVG9hJBP9jn3SSxspwo",
        "type": 1,
        "group_name": "Test testing",
        "user": {
            "id": 18,
            "full_name": "guest_2645264",
            "username": "guest_2645264",
            "profile_image": null
        },
        "character": {
            "id": 26,
            "character_name": "Test testing",
            "short_bio": "Test Role",
            "character_gender": "male",
            "prompt": "test prompt",
            "character_story": "Updated Story",
            "character_visibility": "unlisted",
            "initial_message": "Initial message for the character...\"",
            "image": null,
            "NSFW": false,
            "lorebook": "Lorebook content...",
            "language": "ENGLISH",
            "created_date": "2024-02-16T10:30:53.541257Z",
            "modified_date": "2024-02-16T10:32:31.073533Z",
            "model_id": 2,
            "user": 3,
            "tags": [
                1
            ]
        }
    }
]
##############################################################################

For get modal info By id API
Request URL: http://127.0.0.1:8000/modal_info_by_id/
(Note:- if you need to change anything in the modal use the model_info API with PUT method along with the model id)

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: Post
Request Body:
{
    "id":1
}

Response:
[
    {
        "id": 2,
        "created_date": "2024-02-23T12:59:13.069729Z",
        "modified_date": "2024-02-23T12:59:13.069751Z",
        "model_name": "modal2",
        "short_bio": "test",
        "huggingFace_model_name": "new modal",
        "model_location": "test",
        "prompt_template": "hii i am testing",
        "temperature": 0.85,
        "repetition_penalty": 1.15,
        "top_p": 0.8,
        "top_k": 50,
        "is_public": true,
        "is_finetune": false,
        "user": {
            "id": 1,
            "full_name": "john",
            "username": "john",
            "email": "john@mailinator.com",
            "profile_image": null
        }
    }
]


##############################################################################
For Lora Model Info APIs
Request URL: http://localhost:8000/lora_modal_info/

Request Headers:
    Authorization: Bearer access_token
    user-refresh-token: refresh_token

----------------------------------------------------------
Request Method: GET
Note:- This will list all public and self created modal details
Response:
[
    {
        "id": 2,
        "created_date": "2024-02-23T13:27:29.149316Z",
        "modified_date": "2024-02-23T13:27:29.149338Z",
        "lora_model_name": "test_lora34",
        "lora_short_bio": "test_lora",
        "dataset_path": "test_lora",
        "tuned_model_path": "test_lora",
        "num_train_epochs": 1,
        "per_device_train_batch_size": 1,
        "learning_rate": 0.0002,
        "warmup_steps": 0,
        "optimizer": "adamw_torch",
        "lr_scheduler_type": "constant",
        "gradient_accumulation_steps": 1,
        "lora_alpha": 32,
        "lora_dropout": 0.05,
        "lora_r": 8,
        "lora_bias": "none",
        "base_model_id": 2,
        "user": 1
    }
]

----------------------------------------------------------
Note:- This API endpoint is used to create modals

Request Method: Post
Request Body:
{
        "lora_model_name": "test_lora34",
        "lora_short_bio": "test_lora",
        "dataset_path": "test_lora",
        "tuned_model_path": "test_lora",
        "num_train_epochs": 1,
        "per_device_train_batch_size": 1,
        "learning_rate": 0.0002,
        "warmup_steps": 0,
        "optimizer": "adamw_torch",
        "lr_scheduler_type": "constant",
        "gradient_accumulation_steps": 1,
        "lora_alpha": 32,
        "lora_dropout": 0.05,
        "lora_r": 8,
        "lora_bias": "none",
        "base_model_id": 2,
}

Response:
{
    "id": 3,
    "created_date": "2024-02-23T13:31:30.483983Z",
    "modified_date": "2024-02-23T13:31:30.484005Z",
    "lora_model_name": "test_lora",
    "lora_short_bio": "test_lora",
    "dataset_path": "test_lora",
    "tuned_model_path": "test_lora",
    "num_train_epochs": 1,
    "per_device_train_batch_size": 1,
    "learning_rate": 0.0002,
    "warmup_steps": 0,
    "optimizer": "adamw_torch",
    "lr_scheduler_type": "constant",
    "gradient_accumulation_steps": 1,
    "lora_alpha": 32,
    "lora_dropout": 0.05,
    "lora_r": 8,
    "lora_bias": "none",
    "base_model_id": 2,
    "user": 1
}

----------------------------------------------------------
Note:- This API endpoint is used to update modal values , which fields you want to update.
Request Method: PUT
Request Body:
{
    "id": 3,
    "lora_model_name": "test_lora",
    "lora_short_bio": "test_lora",
    "dataset_path": "test_lora",
    "tuned_model_path": "test_lora",
    "num_train_epochs": 1,
}

Response:
{
    "message": "Lora Model info update successfully"
}

----------------------------------------------------------
Request Method: DELETE
Request Body:
{
    "id":2
}

Response:
{
    "message": "Lora Model info deleted successfully"
}

##############################################################################